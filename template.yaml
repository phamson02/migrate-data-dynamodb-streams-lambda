AWSTemplateFormatVersion: '2010-09-09'
Description: Setup AWS Step Functions to migrate old items in DynamoDB table to DynamoDB Stream by modifying them

Parameters:
  S3BucketName:
    Type: String
    Description: S3 Bucket Name

  S3Key:
    Type: String
    Description: S3 Key

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet Ids

  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Security Group Ids

  DynamoDBTableName:
    Type: String
    Description: DynamoDB Table Name

  MigrationBatchLimit:
    Type: Number
    Default: 25
    Description: Migration Batch Limit for each Lambda invocation, 0 for no migration

Resources:
  LambdaFunctionDynamoDBMigrationExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaDynamoDBMigrationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:BatchWriteItem
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  LambdaFunctionDynamoDBMigrationHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaFunctionDynamoDBMigrationExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      Runtime: python3.10
      Timeout: 900
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableName
          BATCH_LIMIT: !Ref MigrationBatchLimit

  DynamoDBMigrationStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: DynamoDBMigrationStateMachine
      DefinitionString:
        !Sub
          - |- 
            {
              "Comment": "A state machine to migrate a DynamoDB table.",
              "StartAt": "InvokeLambda",
              "States": {
                "InvokeLambda": {
                  "Type": "Task",
                  "Resource": "${LambdaArn}",
                  "Next": "IsMigrationComplete",
                  "Retry": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 5,
                      "BackoffRate": 2.0
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": ["States.ALL"],
                      "Next": "MigrationFailed"
                    }
                  ]
                },
                "IsMigrationComplete": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.LastEvaluatedKey",
                      "IsNull": true,
                      "Next": "MigrationComplete"
                    }
                  ],
                  "Default": "InvokeLambda"
                },
                "MigrationFailed": {
                  "Type": "Fail",
                  "Cause": "MigrationTaskFailed"
                },
                "MigrationComplete": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          - {LambdaArn: !GetAtt LambdaFunctionDynamoDBMigrationHandler.Arn}
      RoleArn: !GetAtt DynamoDBMigrationStateMachineRole.Arn

  DynamoDBMigrationStateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBMigrationStateMachineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaFunctionDynamoDBMigrationHandler.Arn